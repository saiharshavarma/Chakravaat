import { useState, useEffect } from "react";

import Typography from "@mui/material/Typography";
import Modal from "@mui/material/Modal";
import Box from "@mui/material/Box";

import MenuItem from "@mui/material/MenuItem";
import Select from "@mui/material/Select";
import Tooltip from "@mui/material/Tooltip";

import SettingsIcon from "@mui/icons-material/Settings";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";

import SpeedDial from "@mui/material/SpeedDial";
import SpeedDialIcon from "@mui/material/SpeedDialIcon";
import SpeedDialAction from "@mui/material/SpeedDialAction";

import { IconButton } from "@mui/material";

import { pressureConverter, speedConverter } from "./UnitConversionFunctions";

import FileCopyIcon from "@mui/icons-material/FileCopyOutlined";
import ExitToAppIcon from "@mui/icons-material/ExitToApp";
import TravelExploreIcon from "@mui/icons-material/TravelExplore";
import ContactSupportIcon from "@mui/icons-material/ContactSupport";
import InfoIcon from "@mui/icons-material/Info";

import { toast, ToastContainer } from "react-toastify";

import "react-toastify/dist/ReactToastify.css";

// import SaveIcon from '@mui/icons-material/Save';
// import PrintIcon from '@mui/icons-material/Print';
// import ShareIcon from '@mui/icons-material/Share';

import Drawer from "@mui/material/Drawer";

import InfoContent from "./InfoContent";

import TextField from "@mui/material/TextField";

const cycloneCategories = [
  {
    Category: 0,
    CloudTop:
      "Cyclones exhibit minimal development, with cloud tops typically below 10,000 feet, indicating limited vertical growth and weaker convective activity compared to more intense systems.",
    TemperatureRange:
      "Moderately warm temperatures, ranging from 20 to 30°C, are not conducive to significant cyclone formation, hindering convective activity and limiting the development of strong cyclonic systems.",
    ForceRange:
      "Weak winds, ranging between 25 to 40 knots, characterize cyclones in this category, indicating a lack of substantial atmospheric energy and resulting in minimal cyclone strength.",
    GradientScale:
      "The pressure gradient is mild, measuring between 1 to 3 hPa per 100 km, suggesting a limited difference in pressure between the cyclone center and its surroundings, which mitigates the cyclone's intensity.",
    CoverageRange:
      "Cyclone impact is limited in scope, with the coverage range confined to a relatively small area due to the weak development of the cyclone, resulting in localized effects and minimal widespread impact.",
    InfluenceRange:
      "The influence range of cyclones in this category is localized, with minimal impact extending only to nearby areas, as the weak cyclonic system lacks the strength to exert significant effects over larger regions.",
    TorqueRange:
      "Cyclones in this category exert low levels of rotational force, with minimal torque generated by the weak cyclonic circulation, resulting in limited spinning motion and reduced overall cyclone intensity.",
  },
  {
    Category: 1,
    CloudTop:
      "Cyclones in Category 1 exhibit moderate development, with cloud tops typically reaching heights between 10,000 to 15,000 feet, suggesting mild cyclone formation and increased convective activity.",
    TemperatureRange:
      "The temperature range in this category is warm, ranging from 25 to 35°C, providing favorable conditions for cyclone formation, although with limited potential for significant intensification.",
    ForceRange:
      "Winds in Category 1 cyclones are mild, ranging between 40 to 60 knots, indicating some strength but remaining relatively weak compared to more intense systems.",
    GradientScale:
      "The pressure gradient is gentle, measuring between 3 to 5 hPa per 100 km, suggesting modest pressure differences between the cyclone center and its surroundings, resulting in mild cyclone effects.",
    CoverageRange:
      "Cyclone impact is small in scope, with the coverage range confined to localized areas due to moderate development, resulting in a relatively small impact area compared to more intense cyclones.",
    InfluenceRange:
      "The influence range of cyclones in this category is regional, with limited impact extending only to nearby regions, as the mild cyclonic system lacks the strength to exert significant effects over larger areas.",
    TorqueRange:
      "Cyclones in Category 1 exhibit moderate levels of rotational force, with the cyclone's rotational motion showing some strength at this level, although not as pronounced as in more intense systems.",
  },
  {
    Category: 2,
    CloudTop:
      "Cyclones in Category 2 exhibit elevated development, with cloud tops typically reaching heights between 15,000 to 30,000 feet, indicating increased cyclone formation and stronger convective activity.",
    TemperatureRange:
      "The temperature range in this category is warmer, ranging from 30 to 40°C, providing favorable conditions for cyclone intensification and increased atmospheric instability.",
    ForceRange:
      "Winds in Category 2 cyclones are moderate, ranging between 60 to 80 knots, indicating a significant increase in strength and potential impact compared to previous categories.",
    GradientScale:
      "The pressure gradient is moderate, measuring between 5 to 7 hPa per 100 km, suggesting substantial pressure differences between the cyclone center and its surroundings, resulting in increased cyclone intensity.",
    CoverageRange:
      "Cyclone impact is moderate in scope, with the coverage range extending over a broader area compared to previous categories, resulting in a larger impact area and potential for more widespread effects.",
    InfluenceRange:
      "The influence range of cyclones in this category is subcontinental, with significant impact extending over a wide region, affecting multiple countries or large landmasses.",
    TorqueRange:
      "Cyclones in Category 2 exhibit increased levels of rotational force, with the cyclone's rotational motion becoming more powerful, resulting in enhanced spinning motion and increased overall cyclone intensity.",
  },
  {
    Category: 3,
    CloudTop:
      "Cyclones in Category 3 reach high altitudes, between 30,000 to 40,000 feet, indicating substantial development and intense convective activity.",
    TemperatureRange:
      "The temperature range is hot, exceeding 40°C, fostering rapid cyclone intensification and heightened atmospheric instability.",
    ForceRange:
      "Winds in Category 3 cyclones are strong, ranging between 80 to 100 knots, exhibiting considerable strength and causing severe impacts.",
    GradientScale:
      "The pressure gradient is steeper, measuring between 7 to 9 hPa per 100 km, indicating intense pressure differentials and resulting in heightened cyclone intensity.",
    CoverageRange:
      "Cyclone impact is extensive, with the coverage range encompassing widespread areas and resulting in severe consequences across affected regions.",
    InfluenceRange:
      "The influence range extends across large landmasses, with significant impact felt continentally, affecting multiple countries and regions.",
    TorqueRange:
      "Cyclones in Category 3 exhibit high levels of rotational force, with the cyclone's rotational motion becoming potent and destructive, resulting in significant structural damage and widespread devastation.",
  },
  {
    Category: 4,
    CloudTop:
      "Cyclones in Category 4 reach very high altitudes, above 40,000 feet, indicating extreme development and intense convective activity.",
    TemperatureRange:
      "The temperature range is extremely hot, well above 40°C, promoting rapid and intense cyclone growth and further enhancing atmospheric instability.",
    ForceRange:
      "Winds in Category 4 cyclones are very strong, ranging between 100 to 120 knots, exhibiting formidable strength and causing catastrophic impacts.",
    GradientScale:
      "The pressure gradient is very steep, exceeding 9 hPa per 100 km, indicating extreme pressure differentials and resulting in unprecedented cyclone intensity.",
    CoverageRange:
      "Cyclone impact is pervasive, with the coverage range encompassing vast regions and resulting in devastating consequences across affected areas.",
    InfluenceRange:
      "The influence range extends hemispherically, with profound impact felt across entire hemispheres, affecting multiple continents and regions.",
    TorqueRange:
      "Cyclones in Category 4 exhibit very high levels of rotational force, with the cyclone's rotational motion reaching unprecedented levels of destruction, resulting in catastrophic structural damage and widespread devastation.",
  },
  {
    Category: 5,
    CloudTop:
      "Cyclones in Category 5 reach extreme altitudes, above 50,000 feet, indicating unprecedented development and intense convective activity.",
    TemperatureRange:
      "The temperature range is exceptionally hot, conducive to the most intense cyclone formation, fostering rapid and extreme cyclone growth.",
    ForceRange:
      "Winds in Category 5 cyclones are extreme, exceeding 120 knots, exhibiting unparalleled strength and causing catastrophic impacts of catastrophic intensity.",
    GradientScale:
      "The pressure gradient is extremely steep, exceeding 10 hPa per 100 km, indicating extreme pressure differentials and resulting in apocalyptic cyclone intensity.",
    CoverageRange:
      "Cyclone impact is ubiquitous, with the coverage range engulfing entire regions and resulting in catastrophic consequences on a global scale.",
    InfluenceRange:
      "The influence range extends globally, with catastrophic impact felt worldwide, affecting all continents and regions with unprecedented devastation.",
    TorqueRange:
      "Cyclones in Category 5 exhibit extreme levels of rotational force, with the cyclone's rotational motion reaching apocalyptic levels of destruction, resulting in catastrophic structural damage and widespread devastation of unprecedented magnitude.",
  },
];

export default function ArchivePredictionBar({
  windIntensity,
  windPressure,
  windCategory,
  date,
  setMainTimezone,
}) {
  const [open, setOpen] = useState(false);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  const [openInfo, setOpenInfo] = useState(false);
  const handleOpenInfo = () => setOpenInfo(true);
  const handleCloseInfo = () => setOpenInfo(false);

  const [timezone, setTimezone] = useState("");
  const [currentTimezone, setCurrentTimezone] = useState("IST");

  const [openDrawer, setOpenDrawer] = useState(false);

  const toggleDrawer = (newOpenDrawer) => () => {
    setOpenDrawer(newOpenDrawer);
  };

  const [intensity, setIntensity] = useState(20);

  const handleIntensityChange = () => {
    const fromUnit = intensityUnit["curr"];
    const newIntensityUnits = {
      prev: intensityUnit["curr"],
    };
    if (fromUnit == "knots") {
      newIntensityUnits["curr"] = "kmh";
    } else if (fromUnit == "kmh") {
      newIntensityUnits["curr"] = "mps";
    } else if (fromUnit == "mps") {
      newIntensityUnits["curr"] = "mph";
    } else if (fromUnit == "mph") {
      newIntensityUnits["curr"] = "fps";
    } else {
      newIntensityUnits["curr"] = "knots";
    }

    const changedSpeed = speedConverter(
      intensity,
      newIntensityUnits["prev"],
      newIntensityUnits["curr"]
    );

    setIntensityUnit(newIntensityUnits);
    setIntensity(changedSpeed);
  };

  const [pressure, setPressure] = useState(20);

  const handlePressureChange = () => {
    const fromUnit = pressureUnit["curr"];
    const newPressureUnits = {
      prev: pressureUnit["curr"],
    };
    if (fromUnit == "Pa") {
      newPressureUnits["curr"] = "mbar";
    } else if (fromUnit == "mbar") {
      newPressureUnits["curr"] = "bar";
    } else if (fromUnit == "bar") {
      newPressureUnits["curr"] = "mmHg";
    } else if (fromUnit == "mmHg") {
      newPressureUnits["curr"] = "atm";
    } else {
      newPressureUnits["curr"] = "Pa";
    }

    const changedPressure = pressureConverter(
      pressure,
      newPressureUnits["prev"],
      newPressureUnits["curr"]
    );

    setPressureUnit(newPressureUnits);
    setPressure(changedPressure);
  };

  const [category, setCategory] = useState("Cat-1");

  const [intensityUnit, setIntensityUnit] = useState({
    prev: "knots",
    curr: "knots",
  });

  const handleIntensityUnitChange = (event) => {
    const newIntensityUnits = {
      prev: intensityUnit["curr"],
      curr: event.target.value,
    };
    setIntensityUnit(newIntensityUnits);
  };

  const [pressureUnit, setPressureUnit] = useState({
    prev: "Pa",
    curr: "Pa",
  });

  const handlePressureUnitChange = (event) => {
    const newPressureUnits = {
      prev: pressureUnit["curr"],
      curr: event.target.value,
    };
    setPressureUnit(newPressureUnits);
  };

  function settingsSaveHandler() {
    // window.open(`https://www.google.com/search?q=${encodeURIComponent('Wind Intensity: 20')}`, '_blank');

    const changedSpeed = speedConverter(
      intensity,
      intensityUnit["prev"],
      intensityUnit["curr"]
    );
    const changedPressure = pressureConverter(
      pressure,
      pressureUnit["prev"],
      pressureUnit["curr"]
    );

    setIntensity(changedSpeed);
    setPressure(changedPressure);
    setCurrentTimezone(timezone);
    setMainTimezone(timezone);
    setTimezone("");
    setOpen(false);
  }

  const style = {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 790,
    bgcolor: "background.paper",
    border: "1px solid rgba(255, 255, 255, 0.5)",
    boxShadow: 24,
    p: 4,
    textAlign: "center",
    display: "flex",
    flexDirection: "column",
    borderRadius: "10px",
    outline: "none",
  };

  const styleInfo = {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: '70vw',
    height: '70vh',
    bgcolor: "background.paper",
    border: "1px solid rgba(255, 255, 255, 0.5)",
    boxShadow: 24,
    textAlign: "center",
    display: "flex",
    flexDirection: "column",
    // borderRadius: "10px",
    // overflow: "scroll",
  };

  const [data, setData] = useState({});
  const [questions, setQuestions] = useState([]);

  useEffect(() => {
    const storedData = localStorage.getItem("data");
    if (storedData) {
      setData(JSON.parse(storedData));
    }
    const storedQuestions = localStorage.getItem("questions");
    if (storedQuestions) {
      setQuestions(JSON.parse(storedQuestions));
    }
  }, []);

  const pressureCopyHandler = () => {
    const newData = {
      ...data,
      [`Archive Pressure (${date} ${currentTimezone})`]: `${pressure} ${pressureUnit["curr"]}`,
    };
    setData(newData);
    localStorage.setItem("data", JSON.stringify(newData));
    toast.success("Pressure Copied To Logs!", {
      position: "bottom-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "colored",
    });
  };

  const windCopyHandler = () => {
    const newData = {
      ...data,
      [`Archive Intensity (${date} ${currentTimezone})`]: `${intensity} ${intensityUnit["curr"]}`,
    };
    setData(newData);
    localStorage.setItem("data", JSON.stringify(newData));
    toast.success("Intensity Copied To Logs!", {
      position: "bottom-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "colored",
    });
  };

  const categoryCopyHandler = () => {
    const newData = {
      ...data,
      [`Archive Category (${date} ${currentTimezone})`]: `${category}`,
    };
    setData(newData);
    localStorage.setItem("data", JSON.stringify(newData));
    toast.success("Category Copied To Logs!", {
      position: "bottom-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "colored",
    });
  };

  const windClipboardHandler = () => {
    const textToCopy = `Cyclone Wind Intensity At: ${date} ${currentTimezone}: ${intensity} ${intensityUnit["curr"]}`;
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        toast.success("Intensity Copied To Clipboard!", {
          position: "bottom-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });

        console.log("Info copied to clipboard:", textToCopy);
      })
      .catch((error) => {
        console.error("Failed to copy info to clipboard:", error);
        toast.error("Failed To Copy To Clipboard!", {
          position: "bottom-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });
      });
  };

  const windWebSearchHandler = () => {
    window.open(
      `https://www.google.com/search?q=${encodeURIComponent(
        `Cyclone Wind Intensity At ${date} ${currentTimezone}: ${intensity} ${intensityUnit["curr"]}`
      )}`,
      "_blank"
    );
  };

  const pressureClipboardHandler = () => {
    const textToCopy = `Cyclone Pressure At: ${date} ${currentTimezone}: ${pressure} ${pressureUnit["curr"]}`;
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        toast.success("Pressure Copied To Clipboard!", {
          position: "bottom-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });

        console.log("Info copied to clipboard:", textToCopy);
      })
      .catch((error) => {
        console.error("Failed to copy info to clipboard:", error);
        toast.error("Failed To Copy To Clipboard!", {
          position: "bottom-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });
      });
  };

  const categoryClipboardHandler = () => {
    const textToCopy = `Cyclone Category At: ${date} ${currentTimezone}: ${category}`;
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        toast.success("Category Copied To Clipboard!", {
          position: "bottom-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });

        console.log("Info copied to clipboard:", textToCopy);
      })
      .catch((error) => {
        console.error("Failed to copy info to clipboard:", error);
        toast.error("Failed To Copy To Clipboard!", {
          position: "bottom-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });
      });
  };

  const pressureWebSearchHandler = () => {
    window.open(
      `https://www.google.com/search?q=${encodeURIComponent(
        `Cyclone Pressure At ${date} ${currentTimezone}: ${pressure} ${pressureUnit["curr"]}`
      )}`,
      "_blank"
    );
  };

  const categoryWebSearchHandler = () => {
    window.open(
      `https://www.google.com/search?q=${encodeURIComponent(
        `Cyclone Category At ${date} ${currentTimezone}: ${category}`
      )}`,
      "_blank"
    );
  };

  const pressureChatbotHandler = () => {
    setQuestions((prevQuestions) => {
      const newQuestions = [
        `The cyclone pressure at the Indian Ocean was ${pressure} ${pressureUnit["curr"]} at ${date} ${currentTimezone}. Can you please analyze this?`,
        ...prevQuestions,
      ];
      localStorage.setItem("questions", JSON.stringify(newQuestions));
      return newQuestions;
    });
    toast.success("Pressure Copied To Questions!", {
      position: "bottom-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "colored",
    });
  };

  const windChatbotHandler = () => {
    setQuestions((prevQuestions) => {
      const newQuestions = [
        `The cyclone intensity at the Indian Ocean was ${intensity} ${intensityUnit["curr"]} at ${date} ${currentTimezone}. Can you please analyze this?`,
        ...prevQuestions,
      ];
      localStorage.setItem("questions", JSON.stringify(newQuestions));
      return newQuestions;
    });
    toast.success("Intensity Copied To Questions!", {
      position: "bottom-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "colored",
    });
  };

  const categoryChatbotHandler = () => {
    setQuestions((prevQuestions) => {
      const newQuestions = [
        `The cyclone category at the Indian Ocean was ${category} at ${date}. Can you please analyze this?`,
        ...questions,
      ];
      localStorage.setItem("questions", JSON.stringify(newQuestions));
      return prevQuestions;
    });
    toast.success("Category Copied To Questions!", {
      position: "bottom-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "colored",
    });
  };

  useEffect(() => {
    setIntensity(windIntensity);
    setPressure(windPressure);
    setCategory(windCategory);
  }, [windIntensity, windPressure, windCategory]);

  // const actions = [
  //   { icon: <FileCopyIcon />, name: 'Copy to Clipboard' },
  //   { icon: <ExitToAppIcon />, name: 'Copy to Logs' },
  //   { icon: <ContactSupportIcon />, name: 'Ask the Chatbot' },
  //   { icon: <TravelExploreIcon />, name: 'Search the Web' },
  // ];
  const actionsWind = [
    {
      icon: (
        <IconButton onClick={windClipboardHandler}>
          <FileCopyIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Copy to Clipboard",
    },
    {
      icon: (
        <IconButton onClick={windCopyHandler}>
          <ExitToAppIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Copy to Logs",
    },
    {
      icon: (
        <IconButton onClick={windWebSearchHandler}>
          <TravelExploreIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Search the Web",
    },
    {
      icon: (
        <IconButton onClick={windChatbotHandler}>
          <ContactSupportIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Ask the Chatbot",
    },
  ];

  const actionsPressure = [
    {
      icon: (
        <IconButton onClick={pressureClipboardHandler}>
          <FileCopyIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Copy to Clipboard",
    },
    {
      icon: (
        <IconButton onClick={pressureCopyHandler}>
          <ExitToAppIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Copy to Logs",
    },
    {
      icon: (
        <IconButton onClick={pressureWebSearchHandler}>
          <TravelExploreIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Search the Web",
    },
    {
      icon: (
        <IconButton onClick={pressureChatbotHandler}>
          <ContactSupportIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Ask the Chatbot",
    },
  ];

  const actionsCategory = [
    {
      icon: (
        <IconButton onClick={categoryClipboardHandler}>
          <FileCopyIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Copy to Clipboard",
    },
    {
      icon: (
        <IconButton onClick={categoryCopyHandler}>
          <ExitToAppIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Copy to Logs",
    },
    {
      icon: (
        <IconButton onClick={categoryWebSearchHandler}>
          <TravelExploreIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Search the Web",
    },
    {
      icon: (
        <IconButton onClick={categoryChatbotHandler}>
          <ContactSupportIcon sx={{ fontSize: 20 }} />
        </IconButton>
      ),
      name: "Ask the Chatbot",
    },
  ];

  const getNextPressureUnit = () => {
    if (pressureUnit["curr"] == "Pa") {
      return "mbar";
    } else if (pressureUnit["curr"] == "mbar") {
      return "bar";
    } else if (pressureUnit["curr"] == "bar") {
      return "mmHg";
    } else if (pressureUnit["curr"] == "mmHg") {
      return "atm";
    } else {
      return "Pa";
    }
  };

  const getNextWindUnit = () => {
    if (intensityUnit["curr"] == "knots") {
      return "kmh";
    } else if (intensityUnit["curr"] == "kmh") {
      return "mps";
    } else if (intensityUnit["curr"] == "mps") {
      return "mph";
    } else if (intensityUnit["curr"] == "mph") {
      return "fps";
    } else {
      return "knots";
    }
  };

  const timeZoneOffsets = {
    BIT: -12 * 60,
    SST: -11 * 60,
    HST: -10 * 60,
    AKST: -9 * 60,
    PST: -8 * 60,
    MST: -7 * 60,
    CST: -6 * 60,
    EST: -5 * 60,
    AST: -4 * 60,
    NST: -3.5 * 60,
    GMT: 0,
    CET: 1 * 60,
    EET: 2 * 60,
    MSK: 3 * 60,
    PKT: 5 * 60,
    IST: 5.5 * 60,
    BST: 6 * 60,
    CST: 8 * 60,
    JST: 9 * 60,
    AEST: 10 * 60,
    NZST: 12 * 60,
  };

  return (
    <div className="flex flex-row w-full">
      <ToastContainer />
      <div className="flex items-center rounded-lg h-16 mt-6 py-6 pl-4 w-full bg-white bg-opacity-10">
        <Tooltip title="Time And Unit Settings">
          <button
            className="rounded-md border border-white flex items-center mr-4 h-10 w-10 opacity-50 p-0.5 hover:opacity-100 transition ease-in-out delay-150"
            onClick={handleOpen}
          >
            <SettingsIcon
              sx={{ fontSize: 25, height: "2rem", width: "2rem" }}
            />
          </button>
        </Tooltip>
        <Tooltip title={"Change Intensity Unit To " + getNextWindUnit()}>
          <button
            className="w-full h-10 text-sm bg-white bg-opacity-10 rounded-lg mr-3 hover:bg-opacity-100 transition ease-in-out delay-150 text-white hover:text-zinc-950"
            onClick={handleIntensityChange}
          >
            Predicted Intensity: {intensity} {intensityUnit["curr"]}
          </button>
        </Tooltip>
        {/* <Tooltip title="Copy to logs">
              <button className='rounded-md border border-white flex flex-row items-center mr-6 h-10 w-10 opacity-50 p-0.5 hover:opacity-100 transition ease-in-out delay-150'
                onClick={windCopyHandler}
              >
                  <ContentCopyIcon sx={{ fontSize: 25, height: '2rem', width: '2rem' }}/>
              </button>
            </Tooltip> */}
        <div className="flex ml-2 mr-4">
          <div className="relative h-10 w-10">
            <SpeedDial
              ariaLabel="Log book actions"
              sx={{
                position: "absolute",
                bottom: 0,
                right: 0,
                // top:0,
                // left:0,
                "& .MuiButtonBase-root:hover": {
                  background: "white",
                  color: "black",
                  border: 2,
                },
                "& .MuiButtonBase-root": {
                  background: "black",
                  height: "2.5rem",
                  width: "2.5rem",
                  border: 2,
                  color: "rgba(255,255,255,0.5)",
                },
              }}
              icon={
                <SpeedDialIcon
                  sx={{
                    "& .MuiSpeedDialIcon-icon": {
                      fontSize: 20,
                    },
                  }}
                />
              }
              // icon={<AddCircleOutlineIcon />}
            >
              {actionsWind.map((action) => (
                <SpeedDialAction
                  key={action.name}
                  icon={action.icon}
                  tooltipTitle={action.name}
                />
              ))}
            </SpeedDial>
          </div>
        </div>
        <Tooltip title={"Change Pressure Unit To " + getNextPressureUnit()}>
          <button
            className="w-full h-10 text-sm bg-white bg-opacity-10 rounded-lg mr-3 hover:bg-opacity-100 transition ease-in-out delay-150 text-white hover:text-zinc-950"
            onClick={handlePressureChange}
          >
            Estimated Pressure: {pressure} {pressureUnit["curr"]}
          </button>
        </Tooltip>
        {/* <Tooltip title="Copy to logs">
              <button className='rounded-md border border-white flex items-center mr-6 h-10 w-10 opacity-50 p-0.5 hover:opacity-100 transition ease-in-out delay-150'
                onClick={pressureCopyHandler}
              >
                  <ContentCopyIcon sx={{ fontSize: 25, height: '2rem', width: '2rem' }}/>
              </button>
            </Tooltip> */}
        <div className="flex ml-2 mr-4">
          <div className="relative h-10 w-10">
            <SpeedDial
              ariaLabel="Log book actions"
              sx={{
                position: "absolute",
                bottom: 0,
                right: 0,
                // top:0,
                // left:0,
                "& .MuiButtonBase-root:hover": {
                  background: "white",
                  color: "black",
                  border: 2,
                },
                "& .MuiButtonBase-root": {
                  background: "black",
                  height: "2.5rem",
                  width: "2.5rem",
                  border: 2,
                  color: "rgba(255,255,255,0.5)",
                },
              }}
              icon={
                <SpeedDialIcon
                  sx={{
                    "& .MuiSpeedDialIcon-icon": {
                      fontSize: 20,
                    },
                  }}
                />
              }
              // icon={<AddCircleOutlineIcon />}
            >
              {actionsPressure.map((action) => (
                <SpeedDialAction
                  key={action.name}
                  icon={action.icon}
                  tooltipTitle={action.name}
                />
              ))}
            </SpeedDial>
          </div>
        </div>

        <Modal
          open={open}
          onClose={handleClose}
          aria-labelledby="unit-conversion-settings"
          aria-describedby="unit-conversion-for-predicted-categories"
        >
          <Box sx={style}>
            <Typography id="modal-modal-title" variant="h6" component="h2">
              UNIT SETTINGS
            </Typography>
            <div className="rounded-md mt-4 flex justify-between p-3 border border-white opacity-40">
              <Typography
                id="modal-modal-description"
                sx={{ mt: 2, marginLeft: 2 }}
              >
                Wind Intensity
              </Typography>
              <Select
                defaultValue={"knots"}
                value={intensityUnit["curr"]}
                label=""
                onChange={handleIntensityUnitChange}
                sx={{ color: "white", width: 400 }}
              >
                {intensityUnit["curr"] == "knots" ? (
                  <MenuItem disabled value={"knots"}>
                    Knots
                  </MenuItem>
                ) : (
                  <MenuItem value={"knots"}>Knots</MenuItem>
                )}
                {intensityUnit["curr"] == "kmh" ? (
                  <MenuItem disabled value={"kmh"}>
                    Kilometers per hour
                  </MenuItem>
                ) : (
                  <MenuItem value={"kmh"}>Kilometers per hour</MenuItem>
                )}
                {intensityUnit["curr"] == "mps" ? (
                  <MenuItem disabled value={"mps"}>
                    Meters per second
                  </MenuItem>
                ) : (
                  <MenuItem value={"mps"}>Meters per second</MenuItem>
                )}
                {intensityUnit["curr"] == "mph" ? (
                  <MenuItem disabled value={"mph"}>
                    Miles per hour
                  </MenuItem>
                ) : (
                  <MenuItem value={"mph"}>Miles per hour</MenuItem>
                )}
                {intensityUnit["curr"] == "fps" ? (
                  <MenuItem disabled value={"fps"}>
                    Feet per second
                  </MenuItem>
                ) : (
                  <MenuItem value={"fps"}>Feet per second</MenuItem>
                )}
              </Select>
            </div>
            <div className="rounded-md mt-4 flex justify-between p-3 border border-white opacity-40">
              <Typography
                id="modal-modal-description"
                sx={{ mt: 2, marginLeft: 2 }}
              >
                Cyclonic Pressure
              </Typography>
              <Select
                defaultValue={10}
                value={pressureUnit["curr"]}
                label=""
                onChange={handlePressureUnitChange}
                sx={{ color: "white", width: 400 }}
              >
                {pressureUnit["curr"] == "Pa" ? (
                  <MenuItem disabled value={"Pa"}>
                    Pascal
                  </MenuItem>
                ) : (
                  <MenuItem value={"Pa"}>Pascal</MenuItem>
                )}
                {pressureUnit["curr"] == "mbar" ? (
                  <MenuItem disabled value={"mbar"}>
                    Millibar
                  </MenuItem>
                ) : (
                  <MenuItem value={"mbar"}>Millibar</MenuItem>
                )}
                {pressureUnit["curr"] == "bar" ? (
                  <MenuItem disabled value={"bar"}>
                    Bar
                  </MenuItem>
                ) : (
                  <MenuItem value={"bar"}>Bar</MenuItem>
                )}
                {pressureUnit["curr"] == "mmHg" ? (
                  <MenuItem disabled value={"mmHg"}>
                    Millimeter of Mercury
                  </MenuItem>
                ) : (
                  <MenuItem value={"mmHg"}>Millimeter of Mercury</MenuItem>
                )}
                {pressureUnit["curr"] == "atm" ? (
                  <MenuItem disabled value={"atm"}>
                    Standard Atmosphere
                  </MenuItem>
                ) : (
                  <MenuItem value={"atm"}>Standard Atmosphere</MenuItem>
                )}
              </Select>
            </div>
            <div className="rounded-md mt-4 flex justify-between p-3 border border-white opacity-40">
              <Typography
                id="modal-modal-description"
                sx={{ mt: 2, marginLeft: 2 }}
              >
                Time Zone Settings
              </Typography>
              <TextField
                id="outlined-basic"
                variant="outlined"
                sx={{ color: "white", width: 400 }}
                value={timezone}
                placeholder="Enter the Time Zone Acronym"
                onChange={(event) => setTimezone(event.target.value)}
                error={
                  timezone !== ""
                    ? !timeZoneOffsets.hasOwnProperty(timezone)
                    : false
                }
                helperText={
                  timezone !== ""
                    ? timeZoneOffsets.hasOwnProperty(timezone)
                      ? ""
                      : "Not A Valid Timezone"
                    : ""
                }
              />
            </div>
            <div className="w-full flex justify-center">
              <button
                className="flex-none h-30 bg-white bg-opacity-50 rounded-lg text-white text-center p-2 w-80 mt-8 mr-6 hover:bg-opacity-100 transition ease-in-out delay-150 hover:text-zinc-950"
                onClick={settingsSaveHandler}
              >
                SAVE
              </button>
            </div>
          </Box>
        </Modal>
      </div>
      <div className="flex items-center rounded-lg h-16 mt-6 ml-4 py-6 px-4 w-[34rem] bg-white bg-opacity-10">
        <Tooltip title="About Category">
          <button
            className="w-full h-10 border border-white rounded-lg mr-3 hover:bg-white hover:text-black border-opacity-20 hover:border-opacity-100 transition ease-in-out delay-150 text-white hover:text-zinc-950"
            onClick={toggleDrawer(true)}
          >
            Predicted Category: {category}
          </button>
        </Tooltip>
        <Modal
          open={openInfo}
          onClose={handleCloseInfo}
          aria-labelledby="unit-conversion-settings"
          aria-describedby="unit-conversion-for-predicted-categories"
        >
          <Box sx={styleInfo}>
            <InfoContent />
          </Box>
        </Modal>
        <Drawer open={openDrawer} onClose={toggleDrawer(false)}>
          <Box
            sx={{ width: 500, height: "100%", padding: "1rem" }}
            role="presentation"
          >
            <div className="w-full rounded-lg h-full bg-black p-4 overflow-scroll">
              <div className="w-full rounded-lg mb-4 bg-white bg-opacity-10 flex flex-col p-4">
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center mb-2">
                  Cloud Top Height
                </div>
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center">
                  {cycloneCategories[windCategory].CloudTop}
                </div>
              </div>
              <div className="w-full rounded-lg mb-4 bg-white bg-opacity-10 flex flex-col p-4">
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center mb-2">
                  Temperature Range
                </div>
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center">
                  {cycloneCategories[windCategory].TemperatureRange}
                </div>
              </div>
              <div className="w-full rounded-lg mb-4 bg-white bg-opacity-10 flex flex-col p-4">
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center mb-2">
                  Force Range
                </div>
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center">
                  {cycloneCategories[windCategory].ForceRange}
                </div>
              </div>
              <div className="w-full rounded-lg mb-4 bg-white bg-opacity-10 flex flex-col p-4">
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center mb-2">
                  Gradient Scale
                </div>
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center">
                  {cycloneCategories[windCategory].GradientScale}
                </div>
              </div>
              <div className="w-full rounded-lg mb-4 bg-white bg-opacity-10 flex flex-col p-4">
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center mb-2">
                  Coverage Range
                </div>
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center">
                  {cycloneCategories[windCategory].CoverageRange}
                </div>
              </div>
              <div className="w-full rounded-lg mb-4 bg-white bg-opacity-10 flex flex-col p-4">
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center mb-2">
                  Influence Range
                </div>
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center">
                  {cycloneCategories[windCategory].InfluenceRange}
                </div>
              </div>
              <div className="w-full rounded-lg mb-4 bg-white bg-opacity-10 flex flex-col p-4">
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center mb-2">
                  Torque Range
                </div>
                <div className="bg-white bg-opacity-10 p-2 rounded-lg rounded-lg text-center">
                  {cycloneCategories[windCategory].TorqueRange}
                </div>
              </div>
            </div>
          </Box>
        </Drawer>
        {/* <Tooltip title="Copy to logs">
              <button className='rounded-md border border-white flex items-center h-10 w-10 opacity-50 p-0.5 hover:opacity-100 transition ease-in-out delay-150'>
                  <ContentCopyIcon sx={{ fontSize: 25, height: '2rem', width: '2rem' }}/>
              </button>
            </Tooltip> */}
        <div className="flex ml-2">
          <div className="relative h-10 w-10">
            <SpeedDial
              ariaLabel="Log book actions"
              sx={{
                position: "absolute",
                bottom: 0,
                right: 0,
                // top:0,
                // left:0,
                "& .MuiButtonBase-root:hover": {
                  background: "white",
                  color: "black",
                  border: 2,
                },
                "& .MuiButtonBase-root": {
                  color: "rgba(255,255,255,0.5)",
                  background: "black",
                  height: "2.5rem",
                  width: "2.5rem",
                  border: 2,
                },
              }}
              icon={
                <SpeedDialIcon
                  sx={{
                    "& .MuiSpeedDialIcon-icon": {
                      fontSize: 20,
                    },
                  }}
                />
              }
              // icon={<AddCircleOutlineIcon />}
            >
              {actionsCategory.map((action) => (
                <SpeedDialAction
                  key={action.name}
                  icon={action.icon}
                  tooltipTitle={action.name}
                />
              ))}
            </SpeedDial>
          </div>
        </div>
        <div>
          <div>
            <Tooltip title="Cyclone Categories">
              <button
                className="opacity-40 hover:opacity-100 transition ease-in-out delay-150"
                onClick={handleOpenInfo}
              >
                <InfoIcon sx={{ fontSize: 40 }} />
              </button>
            </Tooltip>
          </div>
        </div>
      </div>
    </div>
  );
}
